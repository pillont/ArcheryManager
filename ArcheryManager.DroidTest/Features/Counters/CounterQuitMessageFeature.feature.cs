// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ArcheryManager.DroidTest.Features.Counters
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CounterQuitMessageFeature")]
    public partial class CounterQuitMessageFeatureFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CounterQuitMessageFeature.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("fr-FR"), "CounterQuitMessageFeature", "\ttest le message de confirmation pour quitter une page de compté", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("test le message pour quitter une cible bouton navigation")]
        public virtual void TestLeMessagePourQuitterUneCibleBoutonNavigation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test le message pour quitter une cible bouton navigation", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.When("J\'ouvre une page tabbed de cible fita", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 7
 testRunner.And("je reviens à la page d\'avant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 9
 testRunner.Then("il y a le texte SureQuitCount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line 11
 testRunner.When("je click sur le texte No", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 13
 testRunner.Then("il y a dans un onglet une cible EnglishTarget", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line 15
 testRunner.When("je reviens à la page d\'avant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 16
 testRunner.When("je click sur le texte Yes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 18
 testRunner.Then("il y a le titre de backdoor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("test le message pour quitter un compteur par le timer")]
        public virtual void TestLeMessagePourQuitterUnCompteurParLeTimer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test le message pour quitter un compteur par le timer", ((string[])(null)));
#line 20
 this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.When("J\'ouvre une page tabbed de cible fita", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 22
 testRunner.And("je click sur le tab timer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 23
 testRunner.And("je reviens à la page d\'avant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 25
 testRunner.Then("il y a le texte SureQuitCount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("test le message pour quitter une zapette bouton navigation")]
        public virtual void TestLeMessagePourQuitterUneZapetteBoutonNavigation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test le message pour quitter une zapette bouton navigation", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.When("J\'ouvre une page tabbed de zappette", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 30
 testRunner.And("je reviens à la page d\'avant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 32
 testRunner.Then("il y a le texte SureQuitCount", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line 34
 testRunner.When("je click sur le texte No", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 36
 testRunner.Then("il y a des boutons de EnglishTarget", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line 38
 testRunner.When("je reviens à la page d\'avant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 39
 testRunner.And("je click sur le texte Yes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 40
 testRunner.And("je scrool en haut", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 41
 testRunner.Then("il y a le titre de backdoor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("test la restitution des option d\'un timer après le message d\'erreur")]
        public virtual void TestLaRestitutionDesOptionDUnTimerApresLeMessageDErreur()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test la restitution des option d\'un timer après le message d\'erreur", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.When("J\'ouvre une page tabbed de cible fita", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 45
 testRunner.And("je click sur le tab timer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 46
 testRunner.And("Je click sur le bouton de réglage de temps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 47
 testRunner.And("je selectionne 200 dans le picker", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 48
 testRunner.And("je passe à l\'option de vague suivante", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 49
 testRunner.And("je lance le timer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 50
 testRunner.And("j\'attend 5 secondes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 51
 testRunner.And("je reviens à la page d\'avant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 52
 testRunner.And("je click sur le texte No", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 53
 testRunner.And("je click sur le tab timer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 55
 testRunner.Then("le timer est à 200 sec", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line 56
 testRunner.And("l\'option de vague est en ABCD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 57
 testRunner.And("le texte de vague contient CD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("test la restitution de score après le message d\'erreur dans une zapette")]
        public virtual void TestLaRestitutionDeScoreApresLeMessageDErreurDansUneZapette()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test la restitution de score après le message d\'erreur dans une zapette", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.When("J\'ouvre une page tabbed de zappette", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 61
 testRunner.And("je click sur le boutton 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 62
 testRunner.And("je click sur le boutton 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 63
 testRunner.And("je click sur le boutton 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 64
 testRunner.And("je click sur le boutton 7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 66
 testRunner.And("je reviens à la page d\'avant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 67
 testRunner.And("je click sur le texte No", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 69
 testRunner.Then("le nombre de flèches dans la liste est de 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line 70
 testRunner.And("la fleche 0 de la liste est un 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 71
 testRunner.And("la fleche 1 de la liste est un 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 72
 testRunner.And("la fleche 2 de la liste est un 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 73
 testRunner.And("la fleche 3 de la liste est un 7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("test la restitution de score après le message d\'erreur dans une cible")]
        public virtual void TestLaRestitutionDeScoreApresLeMessageDErreurDansUneCible()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("test la restitution de score après le message d\'erreur dans une cible", ((string[])(null)));
#line 77
this.ScenarioSetup(scenarioInfo);
#line 78
 testRunner.When("J\'ouvre une page tabbed de cible fita", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quand ");
#line 79
 testRunner.And("je tire une flèche en 0, 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 80
 testRunner.And("je tire une flèche en 50, 70", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 81
 testRunner.And("je tire une flèche en 30, 20", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 83
 testRunner.And("je reviens à la page d\'avant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 84
 testRunner.And("je click sur le texte No", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 86
 testRunner.Then("le nombre de flèches dans la liste est de 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Alors ");
#line 87
 testRunner.And("la fleche 0 de la liste est un X10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 88
 testRunner.And("la fleche 1 de la liste est un 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 89
 testRunner.And("la fleche 2 de la liste est un 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 91
 testRunner.And("la fleche 0 de la cible est en 376, 713", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 92
 testRunner.And("la fleche 1 de la cible est en 437, 798", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line 93
 testRunner.And("la fleche 2 de la cible est en 415, 737", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Et ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
